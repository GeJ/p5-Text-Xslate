
=head1 NAME

Text::Xslate::Cookbook - How to cook Xslate templates

=head1 DESCRIPTION

The Xslate cookbook is a set of recipes showing Xslate features.

=head1 RECIPES

=head2 How to use FillInForm with Xslate

Use the block filter syntax with C<HTML::FillInForm> or
C<HTML::FillInForm::Lite>.

Code using C<HTML::FillInForm>:

    #!perl -w
    use strict;

    use Text::Xslate;
    use HTML::FillInForm;

    sub fillinform {
        my($q) = @_;

        return sub {
            my($html) = @_;
            return HTML::FillInForm->fill(\$html, $q);
        };
    }

    my $tx  = Text::Xslate->new(
        function => {
            fillinform => \&fillinform,
        },
    );

    my %vars = (
        q => { foo => "<filled value>" },
    );
    print $tx->render_string(<<'T', \%vars);
    FillInForm
    : block form | fillinform($q) | raw -> {
    <form>
    <input type="text" name="foo" />
    </form>
    : }
    T

Output:

    FillInForm
    <form>
    <input type="text" name="foo" value="&lt;filled value&gt;" />
    </form>

Note that the C<raw> filter is required to render HTML components.

=head2 How to apply uri escape to template expressions

Use C<URI::Escape> or C<URI::Escape::XS>.

Code using C<URI::Escape>:

    #!perl -w
    use strict;

    use Text::Xslate;

    my $tx  = Text::Xslate->new(
        module => ['URI::Escape'],
    );

    print $tx->render_string(<<'T', { app_param => "foo & bar" });
    <a href="http://example.com/app/<:
        $app_param | uri_escape_utf8 :>">something</a>
    T

Output:

    <a href="http://example.com/app/foo%20%26%20bar">something</a>

See also L<URI::Escape> or L<URI::Escape::XS>.

=head2 How to use Template Toolkit's WRAPPER feature in Kolon

Use template cascading, which is a super-set of the C<WRAPPER> directive.

F<wrapper.tx>:

    <div class="wrapper">
    block content -> { }
    </div>

F<content.tx>

    : cascade wrapper

    : override content -> {
        Hello, world!
    : }

Output:

    <div class="wrapper">
        Hello, world!
    </div>

=head1 SEE ALSO

L<Text::Xslate>

=cut
